#!/usr/bin/env node

/**
 * Script de diagnostic pour v√©rifier les stations dans la base de donn√©es
 */

const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function checkStations() {
  console.log('üîç V√©rification des stations dans la base de donn√©es...\n');

  try {
    const stations = await prisma.station.findMany({
      include: {
        manager: {
          select: {
            id: true,
            name: true,
            email: true,
            role: true,
          },
        },
        _count: {
          select: {
            tickets: true,
          },
        },
      },
      orderBy: {
        createdAt: 'desc',
      },
    });

    console.log(`üìä Total: ${stations.length} station(s) trouv√©e(s)\n`);

    if (stations.length === 0) {
      console.log('‚ö†Ô∏è  Aucune station dans la base de donn√©es');
      console.log('üí° Ex√©cutez: npm run db:seed pour ajouter des stations de test\n');
      return;
    }

    stations.forEach((station, index) => {
      console.log(`${index + 1}. ${station.name}`);
      console.log(`   Code: ${station.code}`);
      console.log(`   Statut: ${station.status === 'open' ? 'üü¢ Ouvert' : 'üî¥ Ferm√©'}`);
      console.log(`   Coordonn√©es: ${station.latitude}, ${station.longitude}`);
      if (station.address) {
        console.log(`   Adresse: ${station.address}`);
      }
      if (station.manager) {
        console.log(`   Manager: ${station.manager.name || station.manager.email} (${station.manager.role})`);
      } else {
        console.log(`   Manager: Aucun`);
      }
      console.log(`   Tickets: ${station._count.tickets}`);
      console.log(`   Cr√©√©e le: ${station.createdAt.toLocaleString('fr-FR')}`);
      console.log('');
    });

    console.log('‚úÖ V√©rification termin√©e\n');

  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

checkStations();
